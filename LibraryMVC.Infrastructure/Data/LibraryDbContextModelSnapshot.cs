// <auto-generated />
using System;
using LibraryMVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryMVC.Data
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryMVC.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "l.Durand@domain.com",
                            MotDePasse = "*Azerty4587",
                            Nom = "Durand",
                            Prenom = "Luc",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 2,
                            Email = "u.Dupont@domain.com",
                            MotDePasse = "*Azerty4587",
                            Nom = "Ulrik",
                            Prenom = "Dupont",
                            Telephone = "0470859578"
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entities.Adresse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Appartement")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Adresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Appartement = "2",
                            CodePostal = "59000",
                            Pays = "France",
                            Rue = "rue du Chambon",
                            Ville = "Lille"
                        },
                        new
                        {
                            Id = 2,
                            Appartement = "10",
                            CodePostal = "75003",
                            Pays = "France",
                            Rue = "rue des pins",
                            Ville = "Paris"
                        },
                        new
                        {
                            Id = 3,
                            Appartement = "7",
                            CodePostal = "13008",
                            Pays = "France",
                            Rue = "rue des voies",
                            Ville = "Marseille"
                        },
                        new
                        {
                            Id = 4,
                            Appartement = "9",
                            CodePostal = "69005",
                            Pays = "France",
                            Rue = "rue de la fibre",
                            Ville = "Lyon"
                        },
                        new
                        {
                            Id = 5,
                            Appartement = "250",
                            CodePostal = "75200",
                            Pays = "France",
                            Rue = "rue Chabrior",
                            Ville = "Les Lillas"
                        },
                        new
                        {
                            Id = 6,
                            Appartement = "15",
                            CodePostal = "86000",
                            Pays = "France",
                            Rue = "rue Junio",
                            Ville = "Poitiers"
                        },
                        new
                        {
                            Id = 7,
                            Appartement = "8",
                            CodePostal = "17000",
                            Pays = "France",
                            Rue = "rue Desmoulins",
                            Ville = "La Rochelle"
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entities.Auteur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Auteurs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "a.Carson@domain.com",
                            Grade = "sociétaire",
                            Nom = "Carson",
                            Prenom = "Alexander",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 2,
                            Email = "m.Alonson@domain.com",
                            Grade = "sociétaire adjoint",
                            Nom = "Alonso",
                            Prenom = "Meredith",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 3,
                            Email = "a.Anand@domain.com",
                            Grade = "adhérent",
                            Nom = "Anand",
                            Prenom = "Arturo",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 4,
                            Email = "g.Barzdukas@domain.com",
                            Grade = "adhérent",
                            Nom = "Barzdukas",
                            Prenom = "Gytis",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 5,
                            Email = "l.Yan@domain.com",
                            Grade = "adhérent",
                            Nom = "Li",
                            Prenom = "Yan",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 6,
                            Email = "l.Yan@domain.com",
                            Grade = "adhérent",
                            Nom = "Justice",
                            Prenom = "Peggy",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 7,
                            Email = "l.Norman@domain.com",
                            Grade = "adhérent",
                            Nom = "Norman",
                            Prenom = "Laura",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 8,
                            Email = "o.Olivetto@domain.com",
                            Grade = "adhérent",
                            Nom = "Olivetto",
                            Prenom = "Nino",
                            Telephone = "0470859578"
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entities.Domaine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Domaines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Nom = "Chemistry"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Nom = "Microéconomie"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Nom = "Macroéconomie"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Nom = "Maths"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Nom = "Litérature"
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entities.Emprunt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEmprunt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRetour")
                        .HasColumnType("datetime2");

                    b.Property<int>("LecteurId")
                        .HasColumnType("int");

                    b.Property<int?>("LivreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LecteurId");

                    b.HasIndex("LivreId");

                    b.ToTable("Emprunts");
                });

            modelBuilder.Entity("LibraryMVC.Entities.Lecteur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdresseId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("AdresseId");

                    b.ToTable("Lecteurs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdresseId = 1,
                            Email = "a.Carson@domain.com",
                            MotDePasse = "*Azerty4587",
                            Nom = "Carson",
                            Prenom = "Alexander",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 2,
                            AdresseId = 2,
                            Email = "m.Alonson@domain.com",
                            MotDePasse = "*Azerty4587",
                            Nom = "Alonso",
                            Prenom = "Meredith",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 3,
                            AdresseId = 3,
                            Email = "a.Anand@domain.com",
                            MotDePasse = "*Azerty4587",
                            Nom = "Anand",
                            Prenom = "Arturo",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 4,
                            AdresseId = 4,
                            Email = "g.Barzdukas@domain.com",
                            MotDePasse = "*Azerty4587",
                            Nom = "Barzdukas",
                            Prenom = "Gytis",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 5,
                            AdresseId = 5,
                            Email = "l.Yan@domain.com",
                            MotDePasse = "*Azerty4587",
                            Nom = "Li",
                            Prenom = "Yan",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 6,
                            AdresseId = 6,
                            Email = "l.Yan@domain.com",
                            MotDePasse = "*Azerty4587",
                            Nom = "Justice",
                            Prenom = "Peggy",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 7,
                            AdresseId = 7,
                            Email = "l.Norman@domain.com",
                            MotDePasse = "*Azerty4587",
                            Nom = "Norman",
                            Prenom = "Laura",
                            Telephone = "0470859578"
                        },
                        new
                        {
                            Id = 8,
                            AdresseId = 1,
                            Email = "o.Olivetto@domain.com",
                            MotDePasse = "*Azerty4587",
                            Nom = "Olivetto",
                            Prenom = "Nino",
                            Telephone = "0470859578"
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entities.Livre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuteurId")
                        .HasColumnType("int");

                    b.Property<int>("DomaineId")
                        .HasColumnType("int");

                    b.Property<int>("NombreDePage")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuteurId");

                    b.HasIndex("DomaineId");

                    b.ToTable("Livres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuteurId = 1,
                            DomaineId = 1,
                            NombreDePage = 300,
                            Titre = "Chemistry"
                        },
                        new
                        {
                            Id = 2,
                            AuteurId = 2,
                            DomaineId = 2,
                            NombreDePage = 250,
                            Titre = "Utilité marginale"
                        },
                        new
                        {
                            Id = 3,
                            AuteurId = 3,
                            DomaineId = 3,
                            NombreDePage = 150,
                            Titre = "Equilibre général"
                        },
                        new
                        {
                            Id = 4,
                            AuteurId = 4,
                            DomaineId = 4,
                            NombreDePage = 500,
                            Titre = "Maths pour les nuls"
                        },
                        new
                        {
                            Id = 5,
                            AuteurId = 5,
                            DomaineId = 4,
                            NombreDePage = 200,
                            Titre = "Géométrie les bases"
                        },
                        new
                        {
                            Id = 6,
                            AuteurId = 6,
                            DomaineId = 5,
                            NombreDePage = 100,
                            Titre = "Les chiens ne font pas des chats"
                        },
                        new
                        {
                            Id = 7,
                            AuteurId = 7,
                            DomaineId = 5,
                            NombreDePage = 345,
                            Titre = "Le seigneur de l'aube"
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entities.Emprunt", b =>
                {
                    b.HasOne("LibraryMVC.Entities.Lecteur", "Lecteur")
                        .WithMany("Emprunts")
                        .HasForeignKey("LecteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryMVC.Entities.Livre", "Livre")
                        .WithMany("Emprunts")
                        .HasForeignKey("LivreId");

                    b.Navigation("Lecteur");

                    b.Navigation("Livre");
                });

            modelBuilder.Entity("LibraryMVC.Entities.Lecteur", b =>
                {
                    b.HasOne("LibraryMVC.Entities.Adresse", "Adresse")
                        .WithMany("Lecteurs")
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("LibraryMVC.Entities.Livre", b =>
                {
                    b.HasOne("LibraryMVC.Entities.Auteur", "Auteur")
                        .WithMany("Livres")
                        .HasForeignKey("AuteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryMVC.Entities.Domaine", "Domaine")
                        .WithMany("Livres")
                        .HasForeignKey("DomaineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auteur");

                    b.Navigation("Domaine");
                });

            modelBuilder.Entity("LibraryMVC.Entities.Adresse", b =>
                {
                    b.Navigation("Lecteurs");
                });

            modelBuilder.Entity("LibraryMVC.Entities.Auteur", b =>
                {
                    b.Navigation("Livres");
                });

            modelBuilder.Entity("LibraryMVC.Entities.Domaine", b =>
                {
                    b.Navigation("Livres");
                });

            modelBuilder.Entity("LibraryMVC.Entities.Lecteur", b =>
                {
                    b.Navigation("Emprunts");
                });

            modelBuilder.Entity("LibraryMVC.Entities.Livre", b =>
                {
                    b.Navigation("Emprunts");
                });
#pragma warning restore 612, 618
        }
    }
}
